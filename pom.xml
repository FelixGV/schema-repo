<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
  xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <prerequisites>
    <maven>2.2.1</maven>
  </prerequisites>

  <artifactId>schema-repo-parent</artifactId>
  <groupId>org.schemarepo</groupId>
  <version>0.1.1-SNAPSHOT</version>

  <name>Schema Repository</name>
  <url>http://schemarepo.org</url>
  <description>Schema Repository parent project</description>
  <packaging>pom</packaging>

  <mailingLists>
    <mailingList>
      <name>Main mailing List</name>
      <subscribe>https://groups.google.com/forum/#!forum/schema-repo</subscribe>
      <post>schema-repo@googlegroups.com</post>
      <archive>https://groups.google.com/forum/#!forum/schema-repo</archive>
    </mailingList>
  </mailingLists>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/schema-repo/schema-repo/issues</url>
  </issueManagement>

  <modules>
    <module>common</module>
    <module>server</module>
    <module>client</module>
    <module>bundle</module>
    <module>zookeeper</module>
    <module>zk-bundle</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- version properties for dependencies -->
    <jetty-8.version>8.1.14.v20131031</jetty-8.version>
    <jersey.version>1.15</jersey.version>
    <guice.version>3.0</guice.version>
    <junit.version>4.11</junit.version>

    <!-- version properties for plugins -->
    <enforcer-plugin.version>1.3.1</enforcer-plugin.version>
    <checkstyle-plugin.version>2.12.1</checkstyle-plugin.version>
    <bundle-plugin-version>2.5.3</bundle-plugin-version>
    <compiler-plugin.version>3.1</compiler-plugin.version>
    <jar-plugin.version>2.5</jar-plugin.version>
    <javadoc-plugin.version>2.9.1</javadoc-plugin.version>
    <surefire-plugin.version>2.17</surefire-plugin.version>
    <shade-plugin.version>1.7.1</shade-plugin.version>
  </properties>

  <!-- dependencyManagement can be used to define dependency versions, scopes, and
    excludes to be shared by child projects. Child projects will not inherit these dependencies,
    rather they inherit the properties of the below dependencies (such as version) if
    the dependency is specified in the child. -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-servlet</artifactId>
        <version>${jetty-8.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-server</artifactId>
        <version>${jetty-8.version}</version>
      </dependency>
      <dependency>
        <groupId>com.google.inject</groupId>
        <artifactId>guice</artifactId>
        <version>${guice.version}</version>
      </dependency>
      <dependency>
        <groupId>com.google.inject.extensions</groupId>
        <artifactId>guice-servlet</artifactId>
        <version>${guice.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.jersey.contribs</groupId>
        <artifactId>jersey-guice</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-server</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- dependencies defines dependencies that all child projects share. Child projects
    will inherit these dependencies directly, and can opt out if necessary with <excludes> -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- defines the default plugin configuration that all child projects inherit from.
      Like dependencyManagement, this provides configuration, version, and other
      parameters if the plugins are used by child projects -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire-plugin.version}</version>
          <configuration>
            <includes>
              <!-- Naming convention for JUnit tests -->
              <include>**/Test**</include>
            </includes>
            <enableAssertions>false</enableAssertions>
            <!-- some IPC tests hang if not run in a separate JVM -->
            <forkMode>always</forkMode>
            <!-- TestSpecificCompiler instantiates a Java compiler to test output results,
                 this does not work with a manifest-only-jar to set the classpath for the javac.
                 This may cause problems on some platforms.
                 See http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html
                 for more information. -->
            <useManifestOnlyJar>false</useManifestOnlyJar>
            <!-- configures unit test standard error and standard out to go to a file per test
                 rather than the console. -->
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <failIfNoTests>false</failIfNoTests>
            <argLine>-Xmx1000m -XX:MaxPermSize=200m</argLine>
            <systemPropertyVariables>
              <test.dir>${project.basedir}/target/</test.dir>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${checkstyle-plugin.version}</version>
          <configuration>
            <consoleOutput>true</consoleOutput>
            <configLocation>checkstyle.xml</configLocation>
          </configuration>
          <!-- Runs by default in the verify phase  (mvn verify or later in the build cycle)
               the 'check' goal will fail the build if it does not pass.  "mvn checkstyle:check"
               will do this alone, or "mvn checkstyle:checkstyle" will report but not break  -->
          <executions>
            <execution>
              <id>checkstyle-check</id>
              <phase>test</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${javadoc-plugin.version}</version>
          <configuration>
            <links>
              <link>http://jackson.codehaus.org/1.9.4/javadoc/</link>
              <link>http://java.sun.com/products/servlet/2.3/javadoc/</link>
              <link>http://hadoop.apache.org/common/docs/current/api/</link>
            </links>
            <tagletArtifacts>
              <tagletArtifact>
                <groupId>org.apache.maven.plugin-tools</groupId>
                <artifactId>maven-plugin-tools-javadoc</artifactId>
                <version>${plugin-tools-javadoc.version}</version>
              </tagletArtifact>
            </tagletArtifacts>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${shade-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

</project>
